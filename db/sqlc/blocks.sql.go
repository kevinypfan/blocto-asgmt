// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blocks.sql

package db

import (
	"context"
)

const createBlock = `-- name: CreateBlock :one
INSERT INTO blocks (
  "block_id",
  "block_number",
  "block_hash",
  "difficulty",
  "extra_data",
  "gas_limit",
  "gas_used",
  "logs_bloom",
  "miner",
  "mix_hash",
  "nonce",
  "parent_hash",
  "receipts_root",
  "sha3_uncles",
  "size",
  "state_root",
  "timestamp",
  "total_difficulty",
  "transactions_root"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
) RETURNING block_id, block_hash, block_number, difficulty, extra_data, gas_limit, gas_used, logs_bloom, miner, mix_hash, nonce, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions_root
`

type CreateBlockParams struct {
	BlockID          int64  `json:"block_id"`
	BlockNumber      string `json:"block_number"`
	BlockHash        string `json:"block_hash"`
	Difficulty       string `json:"difficulty"`
	ExtraData        string `json:"extra_data"`
	GasLimit         string `json:"gas_limit"`
	GasUsed          string `json:"gas_used"`
	LogsBloom        string `json:"logs_bloom"`
	Miner            string `json:"miner"`
	MixHash          string `json:"mix_hash"`
	Nonce            string `json:"nonce"`
	ParentHash       string `json:"parent_hash"`
	ReceiptsRoot     string `json:"receipts_root"`
	Sha3Uncles       string `json:"sha3_uncles"`
	Size             string `json:"size"`
	StateRoot        string `json:"state_root"`
	Timestamp        string `json:"timestamp"`
	TotalDifficulty  string `json:"total_difficulty"`
	TransactionsRoot string `json:"transactions_root"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (Block, error) {
	row := q.db.QueryRowContext(ctx, createBlock,
		arg.BlockID,
		arg.BlockNumber,
		arg.BlockHash,
		arg.Difficulty,
		arg.ExtraData,
		arg.GasLimit,
		arg.GasUsed,
		arg.LogsBloom,
		arg.Miner,
		arg.MixHash,
		arg.Nonce,
		arg.ParentHash,
		arg.ReceiptsRoot,
		arg.Sha3Uncles,
		arg.Size,
		arg.StateRoot,
		arg.Timestamp,
		arg.TotalDifficulty,
		arg.TransactionsRoot,
	)
	var i Block
	err := row.Scan(
		&i.BlockID,
		&i.BlockHash,
		&i.BlockNumber,
		&i.Difficulty,
		&i.ExtraData,
		&i.GasLimit,
		&i.GasUsed,
		&i.LogsBloom,
		&i.Miner,
		&i.MixHash,
		&i.Nonce,
		&i.ParentHash,
		&i.ReceiptsRoot,
		&i.Sha3Uncles,
		&i.Size,
		&i.StateRoot,
		&i.Timestamp,
		&i.TotalDifficulty,
		&i.TransactionsRoot,
	)
	return i, err
}

const getBlockByHash = `-- name: GetBlockByHash :one
SELECT block_id, block_hash, block_number, difficulty, extra_data, gas_limit, gas_used, logs_bloom, miner, mix_hash, nonce, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions_root FROM blocks
WHERE block_hash = $1 LIMIT 1
`

func (q *Queries) GetBlockByHash(ctx context.Context, blockHash string) (Block, error) {
	row := q.db.QueryRowContext(ctx, getBlockByHash, blockHash)
	var i Block
	err := row.Scan(
		&i.BlockID,
		&i.BlockHash,
		&i.BlockNumber,
		&i.Difficulty,
		&i.ExtraData,
		&i.GasLimit,
		&i.GasUsed,
		&i.LogsBloom,
		&i.Miner,
		&i.MixHash,
		&i.Nonce,
		&i.ParentHash,
		&i.ReceiptsRoot,
		&i.Sha3Uncles,
		&i.Size,
		&i.StateRoot,
		&i.Timestamp,
		&i.TotalDifficulty,
		&i.TransactionsRoot,
	)
	return i, err
}

const getBlockById = `-- name: GetBlockById :one
SELECT block_id, block_hash, block_number, difficulty, extra_data, gas_limit, gas_used, logs_bloom, miner, mix_hash, nonce, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions_root FROM blocks
WHERE block_id = $1 LIMIT 1
`

func (q *Queries) GetBlockById(ctx context.Context, blockID int64) (Block, error) {
	row := q.db.QueryRowContext(ctx, getBlockById, blockID)
	var i Block
	err := row.Scan(
		&i.BlockID,
		&i.BlockHash,
		&i.BlockNumber,
		&i.Difficulty,
		&i.ExtraData,
		&i.GasLimit,
		&i.GasUsed,
		&i.LogsBloom,
		&i.Miner,
		&i.MixHash,
		&i.Nonce,
		&i.ParentHash,
		&i.ReceiptsRoot,
		&i.Sha3Uncles,
		&i.Size,
		&i.StateRoot,
		&i.Timestamp,
		&i.TotalDifficulty,
		&i.TransactionsRoot,
	)
	return i, err
}

const getBlockByNumber = `-- name: GetBlockByNumber :one
SELECT block_id, block_hash, block_number, difficulty, extra_data, gas_limit, gas_used, logs_bloom, miner, mix_hash, nonce, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions_root FROM blocks
WHERE block_number = $1 LIMIT 1
`

func (q *Queries) GetBlockByNumber(ctx context.Context, blockNumber string) (Block, error) {
	row := q.db.QueryRowContext(ctx, getBlockByNumber, blockNumber)
	var i Block
	err := row.Scan(
		&i.BlockID,
		&i.BlockHash,
		&i.BlockNumber,
		&i.Difficulty,
		&i.ExtraData,
		&i.GasLimit,
		&i.GasUsed,
		&i.LogsBloom,
		&i.Miner,
		&i.MixHash,
		&i.Nonce,
		&i.ParentHash,
		&i.ReceiptsRoot,
		&i.Sha3Uncles,
		&i.Size,
		&i.StateRoot,
		&i.Timestamp,
		&i.TotalDifficulty,
		&i.TransactionsRoot,
	)
	return i, err
}

const listBlocks = `-- name: ListBlocks :many
SELECT block_id, block_hash, block_number, difficulty, extra_data, gas_limit, gas_used, logs_bloom, miner, mix_hash, nonce, parent_hash, receipts_root, sha3_uncles, size, state_root, timestamp, total_difficulty, transactions_root FROM blocks
ORDER BY block_id desc
LIMIT $1
OFFSET $2
`

type ListBlocksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBlocks(ctx context.Context, arg ListBlocksParams) ([]Block, error) {
	rows, err := q.db.QueryContext(ctx, listBlocks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Block{}
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.BlockID,
			&i.BlockHash,
			&i.BlockNumber,
			&i.Difficulty,
			&i.ExtraData,
			&i.GasLimit,
			&i.GasUsed,
			&i.LogsBloom,
			&i.Miner,
			&i.MixHash,
			&i.Nonce,
			&i.ParentHash,
			&i.ReceiptsRoot,
			&i.Sha3Uncles,
			&i.Size,
			&i.StateRoot,
			&i.Timestamp,
			&i.TotalDifficulty,
			&i.TransactionsRoot,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

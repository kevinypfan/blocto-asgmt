// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: logs.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (
    "address",
    "topics",
    "block_num",
    "tx_hash",
    "block_hash",
    "removed",
    "log_index"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, address, topics, block_num, tx_hash, block_hash, log_index, removed
`

type CreateLogParams struct {
	Address   string   `json:"address"`
	Topics    []string `json:"topics"`
	BlockNum  int64    `json:"block_num"`
	TxHash    string   `json:"tx_hash"`
	BlockHash string   `json:"block_hash"`
	Removed   bool     `json:"removed"`
	LogIndex  int64    `json:"log_index"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog,
		arg.Address,
		pq.Array(arg.Topics),
		arg.BlockNum,
		arg.TxHash,
		arg.BlockHash,
		arg.Removed,
		arg.LogIndex,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Address,
		pq.Array(&i.Topics),
		&i.BlockNum,
		&i.TxHash,
		&i.BlockHash,
		&i.LogIndex,
		&i.Removed,
	)
	return i, err
}

const listLogsByTransactionHash = `-- name: ListLogsByTransactionHash :many
SELECT id, address, topics, block_num, tx_hash, block_hash, log_index, removed FROM logs
WHERE tx_hash = $1 ORDER BY log_index asc
`

func (q *Queries) ListLogsByTransactionHash(ctx context.Context, txHash string) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByTransactionHash, txHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			pq.Array(&i.Topics),
			&i.BlockNum,
			&i.TxHash,
			&i.BlockHash,
			&i.LogIndex,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: logs.sql

package db

import (
	"context"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (
    "address",
    "topics",
    "data",
    "block_number",
    "transaction_hash",
    "transaction_index",
    "block_hash",
    "log_index",
    "removed"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, address, topics, data, block_number, transaction_hash, transaction_index, block_hash, log_index, removed
`

type CreateLogParams struct {
	Address          string `json:"address"`
	Topics           string `json:"topics"`
	Data             string `json:"data"`
	BlockNumber      string `json:"block_number"`
	TransactionHash  string `json:"transaction_hash"`
	TransactionIndex string `json:"transaction_index"`
	BlockHash        string `json:"block_hash"`
	LogIndex         string `json:"log_index"`
	Removed          bool   `json:"removed"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog,
		arg.Address,
		arg.Topics,
		arg.Data,
		arg.BlockNumber,
		arg.TransactionHash,
		arg.TransactionIndex,
		arg.BlockHash,
		arg.LogIndex,
		arg.Removed,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Topics,
		&i.Data,
		&i.BlockNumber,
		&i.TransactionHash,
		&i.TransactionIndex,
		&i.BlockHash,
		&i.LogIndex,
		&i.Removed,
	)
	return i, err
}

const listLogsByTransactionHash = `-- name: ListLogsByTransactionHash :many
SELECT id, address, topics, data, block_number, transaction_hash, transaction_index, block_hash, log_index, removed FROM logs
WHERE transaction_hash = $1
`

func (q *Queries) ListLogsByTransactionHash(ctx context.Context, transactionHash string) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByTransactionHash, transactionHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Topics,
			&i.Data,
			&i.BlockNumber,
			&i.TransactionHash,
			&i.TransactionIndex,
			&i.BlockHash,
			&i.LogIndex,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByTransactionIndex = `-- name: ListLogsByTransactionIndex :many
SELECT id, address, topics, data, block_number, transaction_hash, transaction_index, block_hash, log_index, removed FROM logs
WHERE transaction_index = $1
`

func (q *Queries) ListLogsByTransactionIndex(ctx context.Context, transactionIndex string) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByTransactionIndex, transactionIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Topics,
			&i.Data,
			&i.BlockNumber,
			&i.TransactionHash,
			&i.TransactionIndex,
			&i.BlockHash,
			&i.LogIndex,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transactions.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  "tx_hash",
  "block_hash",
  "block_num",
  "from",
  "to",
  "nonce",
  "value",
  "gas",
  "tx_index"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING tx_hash, block_hash, block_num, "from", "to", nonce, value, gas, tx_index
`

type CreateTransactionParams struct {
	TxHash    string `json:"tx_hash"`
	BlockHash string `json:"block_hash"`
	BlockNum  int64  `json:"block_num"`
	From      string `json:"from"`
	To        string `json:"to"`
	Nonce     int64  `json:"nonce"`
	Value     int64  `json:"value"`
	Gas       int64  `json:"gas"`
	TxIndex   int64  `json:"tx_index"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TxHash,
		arg.BlockHash,
		arg.BlockNum,
		arg.From,
		arg.To,
		arg.Nonce,
		arg.Value,
		arg.Gas,
		arg.TxIndex,
	)
	var i Transaction
	err := row.Scan(
		&i.TxHash,
		&i.BlockHash,
		&i.BlockNum,
		&i.From,
		&i.To,
		&i.Nonce,
		&i.Value,
		&i.Gas,
		&i.TxIndex,
	)
	return i, err
}

const getTransactionByHash = `-- name: GetTransactionByHash :one
SELECT tx_hash, block_hash, block_num, "from", "to", nonce, value, gas, tx_index FROM transactions
WHERE tx_hash = $1 LIMIT 1
`

func (q *Queries) GetTransactionByHash(ctx context.Context, txHash string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByHash, txHash)
	var i Transaction
	err := row.Scan(
		&i.TxHash,
		&i.BlockHash,
		&i.BlockNum,
		&i.From,
		&i.To,
		&i.Nonce,
		&i.Value,
		&i.Gas,
		&i.TxIndex,
	)
	return i, err
}

const listTransactionsByBlockHash = `-- name: ListTransactionsByBlockHash :many
SELECT tx_hash, block_hash, block_num, "from", "to", nonce, value, gas, tx_index FROM transactions
WHERE block_hash = $1
`

func (q *Queries) ListTransactionsByBlockHash(ctx context.Context, blockHash string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByBlockHash, blockHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TxHash,
			&i.BlockHash,
			&i.BlockNum,
			&i.From,
			&i.To,
			&i.Nonce,
			&i.Value,
			&i.Gas,
			&i.TxIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByBlockNumber = `-- name: ListTransactionsByBlockNumber :many
SELECT tx_hash, block_hash, block_num, "from", "to", nonce, value, gas, tx_index FROM transactions
WHERE block_num = $1 ORDER BY tx_index asc
`

func (q *Queries) ListTransactionsByBlockNumber(ctx context.Context, blockNum int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByBlockNumber, blockNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TxHash,
			&i.BlockHash,
			&i.BlockNum,
			&i.From,
			&i.To,
			&i.Nonce,
			&i.Value,
			&i.Gas,
			&i.TxIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
